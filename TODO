BUGS:
 o Lazers jump a square in their first move
 - Crashes surf sometimes
 - Architecture needs rethinking. Too many abstraction boundaries between classes and their parents.
 - Enemies can steer in space
 o Many characters can inhabit one tile
 - Enemies can trap you in space.
   - Fix by letting you push off people in space (grappling)
 - Game crashes sometimes when laser leaves map (can reproduce by shooting up lots)

Features:
Prototype:
 o SPAAAAAACE!
 o Diagonal movement
 o Enemies
   o Some sort of common codebase, too. Like move()
   - Better AI (Scatter mode? Depends on gameplay decisions...)
 o Shooting! Lasers! ZAP ZAP!
   - Use a fancy scheduler so we can actually draw intermediate laser steps.
 o Change the sprite of stunned enemies to be a countdown
 o Lasers destroy walls
 - Lasers heat up walls, cool down over a couple of turns, break on second shot
 - Gold
  - Possible implementations:
   - Every entity has a gold value, so enemies have a certain amount of gold, so does the player, and lastly items are worth a certain amount
    -Touching stunned enemies steals some gold?
   - Gold is a specific item all unto itself, I don't like this idea particularly because it increases the number of entities arbitrarily 
 - Field of View
 - Pushing of stunned enemies?

Code:
 o Make waitForKey re-entrant (allow calling waitForKey from within its callback) (maybe with reference counting)

If game is fun:
 - Air pressure     m (_ _) m
 - Status window
 - Brainstorm!

Thoughts on entities in the game: 
	The current core of an entity is which mode it is in
	Modes decide behaviour, how it draws, how it affects others
	Modes, imo, should be how we communicate between the behaviour and presentation layers
	The drawing layer decides how to present the current state of any object
	The logic layer decides how an object behaves given its state

	Extract text, presentation in to resources
